openapi: 3.0.0
info:
  description: X-Road Central Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
  version: "1.0.0"
  title: X-Road Central Server Admin API
  contact:
    name: Nordic Institute for Interoperability Solutions (NIIS)
    url: https://github.com/nordic-institute/X-Road-development/#enhancement-requests-and-error-reports
    email: info@niis.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: /api/v1
    description: basepath for API v1
tags:
  - name: backups
    description: resources related to Backups and Backup Restoration
  - name: certification-services
    description: resources related to Certification Services
  - name: certification-services-ocsp-responders
    description: resources related to OCSP Responders belonging to Certification Services
  - name: certification-services-intermediate-cas
    description: resources related to Intermediate Certificate Authorities belonging to Certification Services
  - name: ocsp-responders
    description: resources related to OCSP Responders
  - name: intermediate-cas
    description: resources related to Intermediate Certificate Authorities
  - name: globalconf
    description: general resources related to Global Configuration
  - name: globalconf-anchors
    description: resources related to Global Configuration anchors
  - name: globalconf-tokens
    description: resources related to Global Configuration tokens
  - name: globalconf-keys
    description: resources related to Global Configuration keys
  - name: system
    description: resources related to System info
  - name: initialization
    description: resources related to Central Server initialization
  - name: member-classes
    description: resources related to Central Server's member classes
paths:
  /certification-services:
    get:
      tags:
        - certification-services
      summary: get all certification services
      operationId: getCertificationServices
      description: <h3>CS administrator views the list of certification services that have been approved and described for this X-Road instance.</h3>
      responses:
        '200':
          description: list of certification services
          content:
            application/json:
              schema:
                type: array
                description: array of certification service objects
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/ApprovedCertificationService'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - certification-services
      summary: add a new certification service
      operationId: addCertificationService
      description: <h3>CS administrator adds a certification service to the list of approved certification services.</h3>
      requestBody:
        description: the new certification service with settings
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CertificationServiceFileAndSettings'
      responses:
        '200':
          description: list of certification services
          content:
            application/json:
              schema:
                type: array
                description: updated array of certification service objects
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/ApprovedCertificationService'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /certification-services/{hash}:
    get:
      tags:
        - certification-services
      summary: get a certification service by its certificate hash
      operationId: getCertificationServiceByHash
      description: <h3>CS administrator views the details of an approved certification service.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the certification service
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '200':
          description: a certification service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovedCertificationService'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - certification-services
      summary: delete certification service
      operationId: deleteCertificationService
      description: <h3>CS Administrator deletes a certification service.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the certification service
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '204':
          description: certification service deletion was successful
        '400':
          description: request was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                error_response:
                  $ref: '#/components/examples/ErrorExample'
                warnings_response:
                  $ref: '#/components/examples/DeleteKeyWarningExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - certification-services
      summary: update the certification service
      operationId: updateCertificationService
      description: <h3>CS administrator edits the settings of a certification service.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the certification service
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      requestBody:
        description: the updated settings of the certification service
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificationServiceSettings'
      responses:
        '200':
          description: the new state of the certification service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovedCertificationService'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /certification-services/{hash}/ocsp-responders:
    get:
      tags:
        - certification-services-ocsp-responders
      summary: get the ocsp responders of a certification service
      operationId: getCertificationServiceOcspResponders
      description: <h3>CS administrator views the OCSP responders configured for a CA.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the certification service
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '200':
          description: list of ocsp responders belonging to the certification service
          content:
            application/json:
              schema:
                type: array
                description: array of ocsp responders
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/OcspResponder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - certification-services-ocsp-responders
      summary: add an ocsp responder to a certification service
      operationId: addCertificationServiceOcspResponder
      description: <h3>CS administrator adds an OCSP responder service information for a CA.</h3>
      requestBody:
        description: ocsp responder to add
        content:
          multipart/form-data:
            schema:
              required:
                - url
                - certificate
              allOf:
                - $ref: '#/components/schemas/OcspResponderUrl'
                - $ref: '#/components/schemas/CertificateFile'
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the certification service
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '200':
          description: updated list of ocsp responders belonging to the certification service
          content:
            application/json:
              schema:
                type: array
                description: array of ocsp responders
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/OcspResponder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /ocsp-responders/{hash}:
    get:
      tags:
        - ocsp-responders
      summary: get an ocsp responder
      operationId: getOcspResponder
      description: <h3>CS administrator views the details of an ocsp responder.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the ocsp responder
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '200':
          description: ocsp responder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OcspResponder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - ocsp-responders
      summary: delete an ocsp responder
      operationId: deleteOcspResponder
      description: <h3>CS administrator deletes an ocsp responder.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the ocsp responder
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '204':
          description: ocsp responder deletion was successful
        '400':
          description: request was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                error_response:
                  $ref: '#/components/examples/ErrorExample'
                warnings_response:
                  $ref: '#/components/examples/DeleteKeyWarningExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - ocsp-responders
      summary: update an ocsp responder
      operationId: updateOcspResponder
      description: <h3>CS administrator updates the details of an ocsp responder.</h3>
      requestBody:
        description: update ocsp responder url, upload a new certificate file, or do both
        content:
          multipart/form-data:
            schema:
              anyOf:
                - $ref: '#/components/schemas/OcspResponderUrl'
                - $ref: '#/components/schemas/CertificateFile'
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the ocsp responder
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '200':
          description: the updated ocsp responder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OcspResponder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /certification-services/{hash}/intermediate-cas:
    get:
      tags:
        - certification-services-intermediate-cas
      summary: get the intermediate certificate authorities of a certification service
      operationId: getCertificationServiceIntermediateCas
      description: <h3>CS administrator views the intermediate CAs configured for a certification service.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the certification service
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '200':
          description: list of intermediate certificate authorities belonging to the certification service
          content:
            application/json:
              schema:
                type: array
                description: array of certificate authorities
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/CertificateAuthority'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - certification-services-intermediate-cas
      summary: add a new intermediate certificate authority to a certification service
      operationId: addCertificationServiceIntermediateCas
      description: <h3>CS administrator configures an intermediate CA for a certification service.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the certification service
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      requestBody:
        description: the new intermediate certificate authority certificate file
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CertificateFile'
      responses:
        '200':
          description: list of cas
          content:
            application/json:
              schema:
                type: array
                description: updated array of cas
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/CertificateAuthority'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /intermediate-cas/{hash}:
    get:
      tags:
        - intermediate-cas
      summary: get an intermediate certificate authority
      operationId: getIntermediateCa
      description: <h3>CS administrator views the details of an intermediate CA.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the intermediate certificate authority cert
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '200':
          description: intermediate certificate authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateAuthority'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - intermediate-cas
      summary: delete an intermediate certificate authority
      operationId: deleteIntermediateCa
      description: <h3>CS administrator deletes an intermediate CA.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the intermediate certificate authority cert
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '204':
          description: ca deletion was successful
        '400':
          description: request was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                error_response:
                  $ref: '#/components/examples/ErrorExample'
                warnings_response:
                  $ref: '#/components/examples/DeleteKeyWarningExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /intermediate-cas/{hash}/ocsp-responders:
    get:
      tags:
        - intermediate-cas-ocsp-responders
      summary: get the ocsp responders of an intermediate certificate authority
      operationId: getIntermediateCaOcspResponders
      description: <h3>CS administrator views the OCSP responders configured for an intermediate CA.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the intermediate certificate authority
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '200':
          description: list of ocsp responders belonging to the intermediate certificate authority
          content:
            application/json:
              schema:
                type: array
                description: array of ocsp responders
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/OcspResponder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - intermediate-cas-ocsp-responders
      summary: add an ocsp responder to an intermediate certificate authority
      operationId: addIntermediateCaOcspResponder
      description: <h3>CS administrator adds an OCSP responder service information for an intermediate CA.</h3>
      requestBody:
        description: ocsp responder to add
        content:
          multipart/form-data:
            schema:
              required:
                - url
                - certificate
              allOf:
                - $ref: '#/components/schemas/OcspResponderUrl'
                - $ref: '#/components/schemas/CertificateFile'
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the intermediate certificate authority
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '200':
          description: updated list of ocsp responders belonging to the intermediate certificate authority
          content:
            application/json:
              schema:
                type: array
                description: array of ocsp responders
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/OcspResponder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /backups:
    get:
      tags:
        - backups
      summary: get central server backups
      operationId: getBackups
      description: <h3>Administrator views the backups for the central server.</h3>
      responses:
        '200':
          description: list of central server backups
          content:
            application/json:
              schema:
                type: array
                description: array of backup objects
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/Backup'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - backups
      summary: add new backup for the central server
      operationId: addBackup
      description:
        <h3>Adds central server backup to the system.</h3>
        <p>This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.</p>
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backup'
        '202':
          description: item accepted
        '400':
          description: request was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                error_response:
                  $ref: '#/components/examples/ErrorExample'
                error_metadata_response:
                  $ref: '#/components/examples/ErrorWithMetadataExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /backups/upload:
    post:
      tags:
        - backups
      summary: upload new backup for the central server
      operationId: uploadBackup
      description:
        <h3>Uploads new central server backup to the system.</h3>
        <p>Note that it is possible to overwrite an existing backup file with the same name.
        <ul>
        <li>Attempt to upload a new backup file having the same name with an existing backup and with query parameter <code>ignore_warnings</code> = false causes the operation to fail with a warning in response's ErrorInfo object.</li>
        <li>Attempt to upload a new backup file having the same name with an existing backup and with query parameter <code>ignore_warnings</code> = true will overwrite the existing backup.</li>
        </ul>
        </p>
        <p>The warning response has a warning code <code>warning_file_already_exists</code> and the metadata field contains the name of the existing backup</p>
      parameters:
        - in: query
          name: ignore_warnings
          description: If true, any ignorable warnings are ignored. if false (or missing),
            any warnings cause request to fail.
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        description: backup to add
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BackupArchive'
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backup'
        '202':
          description: item accepted
        '400':
          description: request was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                error_response:
                  $ref: '#/components/examples/ErrorExample'
                warnings_response:
                  $ref: '#/components/examples/UploadExistingBackupWarningExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /backups/{filename}:
    delete:
      tags:
        - backups
      summary: delete central server backup
      operationId: deleteBackup
      description: <h3>Administrator deletes the backup of the central server.</h3>
      parameters:
        - in: path
          name: filename
          description: filename of the backup
          required: true
          schema:
            type: string
            format: filename
            minLength: 1
            maxLength: 255
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /backups/{filename}/restore:
    put:
      tags:
        - backups
      summary: restore central server configuration from backup
      operationId: restoreBackup
      description:
        <h3>Administrator restores the central server configuration from backup.</h3>
        <p>This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup restore script.</p>
      parameters:
        - in: path
          name: filename
          description: filename of the backup
          required: true
          schema:
            type: string
            format: filename
            minLength: 1
            maxLength: 255
      responses:
        '200':
          description: restore was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensLoggedOut'
        '400':
          description: request was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                error_response:
                  $ref: '#/components/examples/ErrorExample'
                error_metadata_response:
                  $ref: '#/components/examples/ErrorWithMetadataExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /backups/{filename}/download:
    get:
      tags:
        - backups
      summary: download central server backup
      operationId: downloadBackup
      description: <h3>Administrator downloads the backup of the central server.</h3>
      parameters:
        - in: path
          name: filename
          description: filename of the backup
          required: true
          schema:
            type: string
            format: filename
            minLength: 1
            maxLength: 255
      responses:
        '200':
          description: backup file downloaded
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: backup file
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/anchor:
    get:
      tags:
        - globalconf-anchors
      summary: CS administrator views the anchor of a configuration source
      operationId: getAnchor
      description: <h3>Administrator views the anchor of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the anchor is fetched for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: the configuration anchor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationAnchor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/anchor/download:
    get:
      tags:
        - globalconf-anchors
      summary: download configuration anchor information
      operationId: downloadAnchor
      description: <h3>Administrator downloads the configuration anchor information of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the anchor is fetched for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: configuration anchor
          content:
            application/xml:
              schema:
                type: string
                format: binary
                description: configuration anchor file
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/anchor/re-create:
    put:
      tags:
        - globalconf-anchors
      summary: re-create the configuration source anchor file
      operationId: reCreateAnchor
      description: <h3>Administrator re-creates the configuration anchor of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the anchor is re-created for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: the new configuration anchor resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationAnchor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/url:
    get:
      tags:
        - globalconf
      summary: CS administrator views the url from where to download the internal configuration from
      operationId: getDownloadUrl
      description: <h3>Administrator views the download url of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the download url is fetched for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: global conf download url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalConfDownloadUrl'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/configuration-parts:
    get:
      tags:
        - globalconf-parts
      summary: CS administrator views the configuration parts of a configuration source
      operationId: getConfigurationParts
      description: <h3>Administrator views the configuration parts of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the configuration parts are fetched for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: global conf parts
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                description: array of configuration parts
                items:
                  $ref: '#/components/schemas/ConfigurationPart'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - globalconf-parts
      summary: CS administrator uploads additional configuration parts file
      operationId: uploadConfigurationParts
      description: <h3>Administrator uploads additional configuration parts file.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the configuration parts are uploaded for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      requestBody:
        description: new additional configuration parts file to add
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigurationPartUpload'
      responses:
        '200':
          description: the new trusted anchor resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedAnchor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/configuration-parts/{type}/download:
    get:
      tags:
        - globalconf-parts
      summary: download a configuration parts file
      operationId: downloadConfigurationParts
      description: <h3>Administrator downloads a configuration parts file.</h3>
      parameters:
        - in: path
          name: type
          description: the type of the configuration part
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationPartType'
        - in: query
          name: configuration_type
          description: the type of the configuration for which the configuration parts are uploaded for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: configuration parts file
          content:
            application/xml:
              schema:
                type: string
                format: binary
                description: configuration parts file
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/keys/{hash}:
    delete:
      tags:
        - globalconf-keys
      summary: delete key
      operationId: deleteKey
      description: <h3>Administrator deletes the key.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the key
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
        - in: query
          name: ignore_warnings
          description: if true, any ignorable warnings are ignored. if false (or missing),
            any warnings cause request to fail
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: key deletion was successful
        '400':
          description: request was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                error_response:
                  $ref: '#/components/examples/ErrorExample'
                warnings_response:
                  $ref: '#/components/examples/DeleteKeyWarningExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/keys/{hash}/activate:
    put:
      tags:
        - globalconf-keys
      summary: activate key
      operationId: activateKey
      description: <h3>Administrator activates a key.</h3>
      parameters:
        - in: path
          name: hash
          description: SHA-1 hash of the certificate of the key
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/tokens:
    get:
      tags:
        - globalconf-tokens
      summary: CS administrator views the tokens of a configuration source
      operationId: getTokens
      description: <h3>Administrator views tokens of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the tokens are fetched for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: list of tokens
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                description: array of token objects
                items:
                  $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/tokens/{id}/login:
    put:
      tags:
        - globalconf-tokens
      summary: login to token
      operationId: loginToken
      description: <h3>Administrator logs in to a token</h3>
      parameters:
        - in: path
          name: id
          description: id of the token
          required: true
          schema:
            type: string
            format: text
            minLength: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPassword'
      responses:
        '200':
          description: logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/tokens/{id}/logout:
    put:
      tags:
        - globalconf-tokens
      summary: logout from token
      operationId: logoutToken
      description: <h3>Administrator logs out from token.</h3>
      parameters:
        - in: path
          name: id
          description: id of the token
          required: true
          schema:
            type: string
            format: text
            minLength: 1
      responses:
        '200':
          description: logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/tokens/{id}/keys:
    post:
      tags:
        - globalconf-keys
      summary: add new key
      operationId: addKey
      description: <h3>Adds key for selected token.</h3>
      parameters:
        - in: path
          name: id
          description: id of the token
          required: true
          schema:
            type: string
            format: text
            minLength: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyLabel'
      responses:
        '201':
          description: key created for the token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/trusted-anchors:
    get:
      tags:
        - globalconf-anchors
      summary: CS administrator views the trusted anchors
      operationId: getTrustedAnchors
      description: <h3>Administrator views the trusted anchors.</h3>
      responses:
        '200':
          description: list of anchors
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                description: array of trusted anchor objects
                items:
                  $ref: '#/components/schemas/TrustedAnchor'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - globalconf-anchors
      summary: CS administrator uploads a new additional trusted anchor
      operationId: uploadTrustedAnchor
      description: <h3>Administrator uploads a new additional trusted anchor.</h3>
      requestBody:
        description: the new trusted anchor file to add
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: trusted anchor file
      responses:
        '200':
          description: the new trusted anchor resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedAnchor'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/trusted-anchors/{hash}:
    delete:
      tags:
        - globalconf-anchors
      summary: delete a trusted anchor
      operationId: deleteTrustedAnchor
      description: <h3>Administrator deletes a trusted anchor.</h3>
      parameters:
        - in: path
          name: hash
          description: hash of the trusted anchor
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/trusted-anchors/{hash}/download:
    get:
      tags:
        - globalconf-anchors
      summary: download trusted anchor
      operationId: downloadTrustedAnchor
      description: <h3>Administrator downloads the trusted anchor.</h3>
      parameters:
        - in: path
          name: hash
          description: hash of the trusted anchor
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '200':
          description: trusted anchor
          content:
            application/xml:
              schema:
                type: string
                format: binary
                description: trusted anchor file
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /system/instance-identifier:
    get:
      tags:
        - system
      summary: get the instance identifier
      operationId: getInstanceIdentifier
      description: <h3>Administrator views the instance identifier of the Central Server.</h3>
      responses:
        '200':
          description: the instance identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceIdentifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /system/version:
    get:
      tags:
        - system
      summary: get information for the system version
      operationId: getSystemVersion
      responses:
        '200':
          description: system version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /system/status:
    get:
      tags:
        - system
      summary: get the system status
      operationId: getSystemStatus
      responses:
        '200':
          description: system status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /system/server-address:
    get:
      tags:
        - system
      summary: get the server address
      operationId: getCentralServerAddress
      responses:
        '200':
          description: central server address response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CentralServerAddress'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - system
      summary: update the server address
      operationId: updateCentralServerAddress
      requestBody:
        description: New central server address
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CentralServerAddress'
      responses:
        '200':
          description: System status with updated Central Server address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /system/management-services:
    get:
      tags:
        - system
      summary: get the current management services configuration
      operationId: getManagementServices
      description: <h3>Administrator views the management services configuration of the Central Server.</h3>
      responses:
        '200':
          description: the management services configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementServices'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - system
      summary: update the management services configuration
      operationId: updateManagementServices
      description: <h3>CS Administrator updates the management services configuration of the Central Server.</h3>
      requestBody:
        description: the x-road member that is the new service provider identifier of the management services
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceProviderId'
      responses:
        '200':
          description: the new status of the updated management services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementServices'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /initialization:
    post:
      tags:
        - initialization
      summary: Initialize a new central server with the provided initial configuration
      operationId: initCentralServer
      description:
        <h3>Administrator initializes a new Central Server with the provided initial configuration.</h3>
        <p>
        This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed.
        If the pin code is too weak, the error code <code>weak_pin</code> is used and the entries in the metadata array are always ordered in following way
        <ul>
        <li>metadata has a list of strings ["pin_min_length", x, "pin_min_char_classes_count", y] where</li>
        <li>x = the minimum length of the pin code</li>
        <li>y = the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code</li>
        </ul>
        Other possible error code are
        <ul>
        <li><code>invalid_init_params</code> for "business" logic problems which can have any one or more of the following strings in the metadata field.
        There "_exists" -entries are returned if parameter has been given already in partially succeeded initialization.
        The "_not_provided"-entries are returned if these parameters is needed still for the initialization,  but it is not given in the request.

        </li>


        <ul>
        <li>pin_code_exists</li>
        <li>pin_code_not_provided</li>
        <li>server_address_exists</li>
        <li>server_address_not_provided</li>
        <li>instance_identifier_exists</li>
        <li>instance_identifier_not_provided</li>
        </ul>
        <li><code>validation_failure</code> for parameter format errors
        </ul>
        </p>
        </p>
        <strong>See the '400' response examples</strong>
      requestBody:
        description: initial central server configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitialServerConf'
      responses:
        '201':
          description: central server initialized
        '400':
          description: request was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                error_response:
                  $ref: '#/components/examples/ErrorExample'
                error_invalid_init_params:
                  $ref: '#/components/examples/ErrorInvalidInitParamsMetadataExample'
                error_weak_pin:
                  $ref: '#/components/examples/ErrorWeakPinMetadataExample'
                warnings_response:
                  $ref: '#/components/examples/InitializationWarningExample'
                validation_errors_response:
                  $ref: '#/components/examples/ValidationErrorsExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /initialization/status:
    get:
      tags:
        - initialization
      summary: Check the initialization status of the Central Server
      operationId: getInitializationStatus
      description: <h3>Administrator checks the initialization status of the Central Server.</h3>
      responses:
        '200':
          description: initialization status of the Central Server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitializationStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /member-classes:
    get:
      tags:
        - member-classes
      summary: get list of member classes
      operationId: getMemberClasses
      description: <h3>CS Administrator lists member classes.</h3>
      responses:
        '200':
          description: array of member classes
          content:
            application/json:
              schema:
                type: array
                description: array of member classes
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/MemberClass'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - member-classes
      summary: add a new member class
      operationId: addMemberClass
      description: <h3>CS Administrator adds a new member class.</h3>
      requestBody:
        description: new additional member class to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberClass'
      responses:
        '200':
          description: the added member class
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberClass'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /member-classes/{code}:
    patch:
      tags:
        - member-classes
      summary: update member class description
      operationId: updateMemberClassDescription
      description: <h3>CS Administrator updates a member class description.</h3>
      parameters:
        - in: path
          name: code
          description: code of the member class
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 255
      requestBody:
        description: the new description of the member class
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberClassDescription'
      responses:
        '200':
          description: the new status of the updated member class
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberClass'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - member-classes
      summary: delete a member class
      operationId: deleteMemberClass
      description: <h3>CS Administrator deletes a member class.</h3>
      parameters:
        - in: path
          name: code
          description: code of the member class
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 255
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    ApprovedCertificationService:
      type: object
      description: certification service
      required:
        - id
        - ca_certificate
        - tls_auth
        - certificate_profile_info
      properties:
        id:
          type: string
          format: text
          description: unique identifier
          example: 123
          readOnly: true
        ca_certificate:
          $ref: '#/components/schemas/CertificateDetails'
        tls_auth:
          type: boolean
          description: can the CA be used for TLS auhtentication
        certificate_profile_info:
          type: string
          format: text
          description: fully qualified class name that implements the ee.ria.xroad.common.certificateprofile.CertificateProfileInfoProvider interface
          example: ee.ria.xroad.common.certificateprofile.impl.FiVRKCertificateProfileInfoProvider
          minLength: 1
        ocsp_responders:
          type: array
          description: array containing ocsp responders
          items:
            $ref: '#/components/schemas/OcspResponder'
        intermediate_cas:
          type: array
          description: array containing intermediate CAs
          items:
            $ref: '#/components/schemas/CertificateAuthority'
    CertificateAuthority:
      type: object
      description: approved certificate authority information
      required:
        - ca_certificate
        - ocsp_responders
      properties:
        ca_certificate:
          $ref: '#/components/schemas/CertificateDetails'
        ocsp_responders:
          type: array
          description: array containing ocsp responders
          items:
            $ref: '#/components/schemas/OcspResponder'
    CertificateDetails:
      type: object
      description: certificate details for any kind of certificate (TLS, auth, sign)
      required:
        - issuer_distinguished_name
        - issuer_common_name
        - subject_distinguished_name
        - subject_common_name
        - not_before
        - not_after
        - serial
        - version
        - signature_algorithm
        - signature
        - public_key_algorithm
        - rsa_public_key_modulus
        - rsa_public_key_exponent
        - hash
        - key_usages
        - subject_alternative_names
      properties:
        issuer_distinguished_name:
          type: string
          format: text
          description: certificate issuer distinguished name
          example: issuer123
          minLength: 1
          maxLength: 255
        issuer_common_name:
          type: string
          format: text
          description: certificate issuer common name
          example: domain.com
          minLength: 1
          maxLength: 255
        subject_distinguished_name:
          type: string
          format: text
          description: certificate subject distinguished name
          example: subject123
          minLength: 1
          maxLength: 255
        subject_common_name:
          type: string
          format: text
          description: certificate subject common name
          example: domain.com
          minLength: 1
          maxLength: 255
        not_before:
          type: string
          format: date-time
          description: certificate validity not before
          example: '2022-01-17T00:00:00.001Z'
          minLength: 24
          maxLength: 24
        not_after:
          type: string
          format: date-time
          description: certificate validity not after
          example: '2022-01-17T00:00:00.001Z'
          minLength: 24
          maxLength: 24
        serial:
          type: string
          format: text
          description: serial number
          example: '123456789'
          minLength: 1
          maxLength: 255
        version:
          type: integer
          format: int32
          example: 3
          description: version
        signature_algorithm:
          type: string
          format: sha-256
          description: certificate signature algorithm
          example: sha256WithRSAEncryption
          minLength: 1
          maxLength: 255
        signature:
          type: string
          format: text
          description: hex encoded certificate signature
          example: '30af2fdc1780...'
          minLength: 1
          maxLength: 255
        public_key_algorithm:
          type: string
          format: sha-256
          description: certificate public key algorithm
          example: 'sha256WithRSAEncryption'
          minLength: 1
          maxLength: 255
        rsa_public_key_modulus:
          type: string
          format: hex
          description: hex encoded RSA public key modulus (if RSA key)
          example: c44421d601...
          minLength: 1
          maxLength: 1000
        rsa_public_key_exponent:
          type: integer
          format: int32
          description: RSA public key exponent (if RSA key) as an integer
          example: 65537
        hash:
          type: string
          format: text
          description: certificate SHA-1 hash
          example: 1234567890ABCDEF
          minLength: 1
          maxLength: 40
        key_usages:
          type: array
          description: certificate key usage array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/KeyUsage'
        subject_alternative_names:
          type: string
          format: text
          description: certificate subject alternative names
          example: DNS:*.example.org
          minLength: 1
          maxLength: 1000
    CertificateFile:
      type: object
      description: certificate file
      required:
        - certificate
      properties:
        certificate:
          type: string
          description: the certificate file
          format: binary
    CertificationServiceSettings:
      type: object
      description: certification service settings
      required:
        - tls_auth
        - certificate_profile_info
      properties:
        tls_auth:
          type: boolean
          description: can the CA be used for TLS auhtentication
        certificate_profile_info:
          type: string
          format: text
          description: fully qualified class name that implements the ee.ria.xroad.common.certificateprofile.CertificateProfileInfoProvider interface
          example: ee.ria.xroad.common.certificateprofile.impl.FiVRKCertificateProfileInfoProvider
          minLength: 1
    CertificationServiceFileAndSettings:
      type: object
      description: certification service file and settings
      allOf:
        - $ref: '#/components/schemas/CertificateFile'
        - $ref: '#/components/schemas/CertificationServiceSettings'
    Backup:
      type: object
      description: central server backup
      required:
        - filename
        - created_at
      properties:
        filename:
          type: string
          format: filename
          description: backup filename
          example: configuration_backup_20181224.tar
          minLength: 1
          maxLength: 255
        created_at:
          type: string
          format: date-time
          description: backup created at
          example: '2022-01-15T00:00:00.001Z'
          minLength: 24
          maxLength: 24
    BackupArchive:
      type: object
      description: central server backup archive file
      properties:
        file:
          type: string
          format: binary
    TokensLoggedOut:
      description: response that tells if hsm tokens were logged out during the restore process
      type: object
      properties:
        hsm_tokens_logged_out:
          description: whether any hsm tokens were logged out during the restore process
          type: boolean
          default: false
    Client:
      type: object
      description: x-road client
      required:
        - member_class
        - member_code
      properties:
        id:
          type: string
          format: text
          description: the encoded string representation of the x-road member id
          example: FI:GOV:123:ABC
          minLength: 1
          maxLength: 1023
          readOnly: true
        instance_id:
          type: string
          format: text
          description: Xroad instance id. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
          example: FI
          minLength: 1
          maxLength: 255
          readOnly: true
        member_name:
          type: string
          format: text
          description: Member name. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
          example: FI
          readOnly: true
          minLength: 1
          maxLength: 255
        member_class:
          type: string
          format: text
          description: Member class. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
          example: GOV
          minLength: 1
          maxLength: 255
        member_code:
          type: string
          format: text
          description: Member code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
          example: 123
          minLength: 1
          maxLength: 255
        subsystem_code:
          type: string
          format: text
          description: Subsystem code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
          example: ABC
          minLength: 1
          maxLength: 255
        client_type:
          $ref: '#/components/schemas/ClientType'
    ClientType:
      type: string
      format: text
      description: subject type
      example: GLOBALGROUP
      readOnly: true
      enum:
        - GLOBALGROUP
        - MEMBER
        - SUBSYSTEM
    ConfigurationPartType:
      type: string
      format: enum
      description: the type of a globalconf configuration part
      example: SHARED_PARAMETERS
      enum:
        - SHARED_PARAMETERS
        - PRIVATE_PARAMETERS
        - FETCHINTERVAL
        - MONITORING
        - NEXTUPDATE
    InitializationStatus:
      type: object
      description: Initialization status of the Central Server
      allOf:
      - $ref: '#/components/schemas/InstanceIdentifier'
      - $ref: '#/components/schemas/CentralServerAddress'
      properties:
        software_token_init_status: # property for enum
          $ref: '#/components/schemas/TokenInitStatus'
      required:
        - software_token_init_status
    InitialServerConf:
      type: object
      description: central server initial configuration
      allOf:
        - $ref: '#/components/schemas/InstanceIdentifier'
        - $ref: '#/components/schemas/CentralServerAddress'
      properties:
        software_token_pin:
          type: string
          format: text
          description: pin code for the initial software token
          example: sup3rs3cr3t_p!n
          minLength: 1
          maxLength: 255
      required:
        - software_token_pin
    TokenInitStatus:
      type: string
      format: enum
      description: whether a token has been initialized or not – if the token init status
        cannot be resolved (e.g. signer module is offline), the value is UNKNOWN
      example: INITIALIZED
      enum:
        - INITIALIZED
        - NOT_INITIALIZED
        - UNKNOWN
    InstanceIdentifier:
      type: object
      description: the instance identifier of the Central Server
      required:
        - instance_identifier
      properties:
        instance_identifier:
          type: string
          format: text
          description: Valid instance identifier, shall not contain colon, semicolon, forwardslash, backslash, percent or control characters.
          example: FI-TEST
          minLength: 1
          maxLength: 255
    CentralServerAddress:
      type: object
      description: address of the central server
      required:
        - central_server_address
      properties:
        central_server_address:
          type: string
          format: text
          description: Central server’s public DNS name or external IP address
    ConfigurationAnchor:
      type: object
      description: global conf anchor
      required:
        - hash
        - created_at
      properties:
        hash:
          type: string
          format: hash
          description: anchor hash
          example: 42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3
          minLength: 1
          maxLength: 255
        created_at:
          type: string
          format: date-time
          description: anchor created at
          example: '2022-01-15T00:00:00.001Z'
          minLength: 24
          maxLength: 24
    ConfigurationType:
      type: string
      format: enum
      description: configuration type
      example: INTERNAL
      enum:
        - INTERNAL
        - EXTERNAL
    GlobalConfDownloadUrl:
      type: object
      description: the global conf download url object
      required:
        - url
      properties:
        url:
          type: string
          format: url
          description: the global conf download url
          example: https://dev.xroad.rocks/globalconf
          minLength: 1
    HighAvailabilityStatus:
      type: object
      description: Central server's high availability status
      properties:
        is_ha_configured:
          type: boolean
          description: indicates if the central server is in high availability mode
          default: false
        node_name:
          type: string
          format: text
          description: central server's node name
          example: node_0
          minLength: 1
          maxLength: 255
    KeyUsage:
      type: string
      format: enum
      description: certificate key usage
      example: NON_REPUDIATION
      enum:
        - DIGITAL_SIGNATURE
        - NON_REPUDIATION
        - KEY_ENCIPHERMENT
        - DATA_ENCIPHERMENT
        - KEY_AGREEMENT
        - KEY_CERT_SIGN
        - CRL_SIGN
        - ENCIPHER_ONLY
        - DECIPHER_ONLY
    MemberClass:
      type: object
      description: Central server's member classes
      allOf:
        - $ref: '#/components/schemas/MemberClassDescription'
      properties:
        code:
          type: string
          format: text
          description: member class code
          example: ORG
          minLength: 1
          maxLength: 255
      required:
        - code
    MemberClassDescription:
      type: object
      description: Central server's member class description
      required:
        - description
      properties:
        description:
          type: string
          format: text
          description: member class description
          example: Non-profit organisations
          minLength: 1
          maxLength: 255
    OcspResponder:
      type: object
      description: OCSP responder
      allOf:
        - $ref: '#/components/schemas/OcspResponderUrl'
        - $ref: '#/components/schemas/OcspResponderCertificate'
    OcspResponderUrl:
      type: object
      description: OCSP responder url
      required:
        - url
      properties:
        url:
          type: string
          format: url
          description: url of the OCSP responder
          example: http://dev.xroad.rocks:123
          minLength: 1
          maxLength: 255
          readOnly: true
    OcspResponderCertificate:
      type: object
      description: OCSP responder certificate
      required:
        - certificate
      properties:
        certificate:
          $ref: '#/components/schemas/CertificateDetails'
    PossibleActions:
      type: array
      description: array containing the possible actions that can be done for this item
      items:
        $ref: '#/components/schemas/PossibleAction'
    PossibleAction:
      type: string
      format: enum
      description: an action to change state or edit anchors, keys or configuration parts
      example: DELETE
      enum:
        - DELETE
        - DOWNLOAD
        - ACTIVATE
        - LOGIN
        - LOGOUT
        - GENERATE_KEY
    SystemStatus:
      type: object
      description: Central server's status
      properties:
        initialization_status:
          $ref: '#/components/schemas/InitializationStatus'
        high_availability_status:
          $ref: '#/components/schemas/HighAvailabilityStatus'
    KeyLabel:
      type: object
      properties:
        label:
          type: string
          format: text
          description: label for the new key
          minLength: 1
          maxLength: 255
    ServiceProviderId:
      type: object
      properties:
        service_provider_id:
          type: string
          format: text
          description: encoded id of the x-road member that provides the management services
          example: FI:GOV:123:ABC
          minLength: 1
          maxLength: 1279
    ManagementServices:
      type: object
      allOf:
        - $ref: '#/components/schemas/ServiceProviderId'
      properties:
        service_provider_name:
          type: string
          format: text
          description: name of the service provider
          example: NIIS
          minLength: 1
          maxLength: 255
          readOnly: true
        security_server_id:
          type: string
          format: text
          description: encoded id of the security server that provides the management services
          example: CS:ORG:111:SS1
          minLength: 1
          maxLength: 1279
          readOnly: true
        wsdl_address:
          type: string
          format: url
          description: the url of the management service wsdl
          example: https://dev.xroad.rocks/managementservices.wsdl
          minLength: 1
          readOnly: true
        services_address:
          type: string
          format: url
          description: the url of the management services
          example: https://dev.xroad.rocks/managementservice/manage/
          minLength: 1
          readOnly: true
        security_server_owners_global_group_code:
          type: string
          format: text
          description: the url of the management services
          example: https://dev.xroad.rocks/managementservice/manage/
          minLength: 1
          readOnly: true
      required:
        - security_server_id
        - security_server_owners_global_group_code
        - service_provider_name
        - services_address
        - wsdl_address
        - service_provider_id
    Token:
      type: object
      description: Token. Also includes the possible actions that can be done to this object,
        e.g DELETE (only for token related operations and does not consider user authorization).
      required:
        - id
        - name
        - keys
        - status
        - logged_in
        - active
        - available
      properties:
        id:
          type: string
          format: text
          description: token id
          example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
          minLength: 1
          readOnly: true
        name:
          type: string
          format: text
          description: token name
          example: softToken-0
          minLength: 1
          maxLength: 255
        keys:
          type: array
          description: token keys
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Key'
        status:
          $ref: '#/components/schemas/TokenStatus'
        logged_in:
          type: boolean
          description: if the token has been logged in to
          example: true
        active:
          type: boolean
          description: if the token is active
          example: true
        available:
          type: boolean
          description: if the token is available
          example: true
        serial_number:
          type: string
          format: text
          description: serial number of the token
          example: 12345
        possible_actions:
          $ref: '#/components/schemas/PossibleActions'
    TokenStatus:
      type: string
      format: text
      description: token status
      example: OK
      enum:
        - OK # Normal operation status
        - USER_PIN_LOCKED # Blocked
        - USER_PIN_INCORRECT # Incorrect PIN was entered
        - USER_PIN_INVALID # Invalid PIN
        - USER_PIN_EXPIRED # PIN expired
        - USER_PIN_COUNT_LOW # Only a few tries left
        - USER_PIN_FINAL_TRY # Final try
        - NOT_INITIALIZED # Not inited
    TokenPassword:
      type: object
      properties:
        password:
          type: string
          format: text
          description: password for logging in to the token
          minLength: 1
      example:
        password: sm3!!ycat
    Key:
      type: object
      description: Key for the certificate. Also includes the possible actions that can be done to this object,
        e.g DELETE (only for key related operations and does not consider user authorization).
      required:
        - id
        - label
        - created_at
        - active
        - available
      properties:
        id:
          type: string
          format: text
          description: key id
          example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
          minLength: 1
          readOnly: true
        label:
          $ref: '#/components/schemas/KeyLabel'
        created_at:
          type: string
          format: date-time
          description: anchor created at
          example: '2022-01-12T00:00:00.001Z'
          minLength: 24
          maxLength: 24
        available:
          type: boolean
          description: if the key is available
          example: true
        active:
          type: boolean
          description: if the key is active
          example: true
        possible_actions:
          $ref: '#/components/schemas/PossibleActions'
    TrustedAnchor:
      type: object
      description: trusted anchor for globalconf
      required:
        - hash
        - created_at
        - instance_identifier
        - possible_actions
      properties:
        hash:
          type: string
          format: hash
          description: anchor hash
          example: 42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3
          minLength: 1
          maxLength: 255
        created_at:
          type: string
          format: date-time
          description: anchor created at
          example: '2022-01-12T00:00:00.001Z'
          minLength: 24
          maxLength: 24
        possible_actions:
          $ref: '#/components/schemas/PossibleActions'
    ConfigurationPart:
      type: object
      description: configuration part
      required:
        - configuration_part_type
        - filename
        - updated_at
        - version
        - optional
      properties:
        configuration_part_type:
          $ref: '#/components/schemas/ConfigurationPartType'
        filename:
          type: string
          format: filename
          example: shared-params.xml
          minLength: 1
          maxLength: 255
        updated_at:
          type: string
          format: date-time
          description: anchor created at
          example: '2022-01-12T00:00:00.001Z'
          minLength: 24
          maxLength: 24
        version:
          type: string
          format: text
          description: version of the conf part
          example: 3
          minLength: 1
        optional:
          type: boolean
          description: if the part is optional
          example: true
    ConfigurationPartUpload:
      type: object
      description: configuration parts file
      required:
        - file
        - configuration_part_type
      properties:
        file:
          type: string
          format: binary
        configuration_part_type:
          $ref: '#/components/schemas/ConfigurationPartType'
    User:
      $ref: '../../../../../common-rest-api/src/main/resources/common-openapi-definition.yaml#/components/schemas/User'
    Version:
      type: object
      description: version information
      required:
        - info
      properties:
        info:
          type: string
          format: text
          description: information about the security server
          example: Security Server version 6.21.0-SNAPSHOT-20190411git32add470
          minLength: 1
          maxLength: 255
    ErrorInfo:
      $ref: '../../../../../common-rest-api/src/main/resources/common-openapi-definition.yaml#/components/schemas/ErrorInfo'
    CodeWithDetails:
      $ref: '../../../../../common-rest-api/src/main/resources/common-openapi-definition.yaml#/components/schemas/CodeWithDetails'
  responses:
    BadRequest:
      description: request was invalid
    Conflict:
      description: an existing item already exists
    Forbidden:
      description: request has been refused
    NoContent:
      description: request was successful
    NotFound:
      description: resource requested does not exists
    Unauthorized:
      description: authentication credentials are missing
    InternalServerError:
      description: internal server error
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: X-Road-ApiKey token=<api key>
      # https://github.com/nordic-institute/X-Road-REST-UI/blob/XRDDEV-237/doc/Manuals/ug-ss_x-road_6_security_server_user_guide.md#1911-creating-new-api-keys
  examples:
    DeleteKeyWarningExample:
      summary: Warning response when trying to delete an authentication key with a registered authentication certificate
      value:
        status: 400
        error:
          code: warnings_detected
        warnings:
          - code: auth_key_with_registered_cert_warning
            metadata:
              - 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
    ErrorExample:
      $ref: '../../../../../common-rest-api/src/main/resources/common-openapi-definition.yaml#/components/examples/ErrorExample'
    ErrorWithMetadataExample:
      $ref: '../../../../../common-rest-api/src/main/resources/common-openapi-definition.yaml#/components/examples/ErrorWithMetadataExample'
    ErrorInvalidInitParamsMetadataExample:
      summary: Initialization error with metadata
      value:
        status: 400
        error:
          code: invalid_init_params
          metadata:
            - "server_address_not_provided"
            - "instance_id_not_provided"
            - "pin_code_exists"
    UploadExistingBackupWarningExample:
      summary: Warning response when uploading a new backup configuration file with an existing name
      value:
        status: 400
        error:
          code: warnings_detected
        warnings:
          - code: warning_file_already_exists
            metadata:
              - conf_backup_20201006-094932.tar
    ErrorWeakPinMetadataExample:
      summary: Initialization or pin change error with metadata when the provided pin is too weak
      value:
        status: 400
        error:
          code: weak_pin
          metadata:
            - "pin_min_length"
            - "8"
            - "pin_min_char_classes_count"
            - "3"
    InitializationWarningExample:
      summary: All initialization warnings example.
      value:
        status: 400
        error:
          code: warnings_detected
        warnings:
          - code: init_software_token_initialized
    ValidationErrorsExample:
      summary: Validation errors response body example
      value:
        status: 400
        error:
          code: validation_failure
          validation_errors:
            "initialServerConf.instanceIdentifier":
              - IdentifierChars
security:
  - ApiKeyAuth: [ ]
