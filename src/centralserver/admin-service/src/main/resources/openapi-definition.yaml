openapi: 3.0.0
info:
  description: X-Road Central Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
  version: "1.0.0"
  title: X-Road Central Server Admin API
  contact:
    name: Nordic Institute for Interoperability Solutions (NIIS)
    url: https://github.com/nordic-institute/X-Road-development/#enhancement-requests-and-error-reports
    email: info@niis.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: /api/v1
    description: basepath for API v1
tags:
  - name: globalconf
    description: resources related to Global Configuration
  - name: globalconf-anchors
    description: resources related to Global Configuration anchors
  - name: globalconf-tokens
    description: resources related to Global Configuration tokens
  - name: globalconf-keys
    description: resources related to Global Configuration keys
  - name: system
    description: resources related to System info
  - name: initialization
    description: resources related to Central Server initialization
  - name: member-classes
    description: resources related to Central Server's member classes
paths:
  /globalconf/anchor:
    get:
      tags:
        - globalconf-anchors
      summary: CS administrator views the anchor of a configuration source
      operationId: getAnchor
      description: <h3>Administrator views the anchor of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the anchor is fetched for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: the configuration anchor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationAnchor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/anchor/download:
    get:
      tags:
        - globalconf-anchors
      summary: download configuration anchor information
      operationId: downloadAnchor
      description: <h3>Administrator downloads the configuration anchor information of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the anchor is fetched for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: configuration anchor
          content:
            application/xml:
              schema:
                type: string
                format: binary
                description: configuration anchor file
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/anchor/re-create:
    put:
      tags:
        - globalconf-anchors
      summary: re-create the configuration source anchor file
      operationId: reCreateAnchor
      description: <h3>Administrator re-creates the configuration anchor of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the anchor is re-created for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: the new configuration anchor resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationAnchor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/url:
    get:
      tags:
        - globalconf
      summary: CS administrator views the url from where to download the internal configuration from
      operationId: getDownloadUrl
      description: <h3>Administrator views the download url of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the download url is fetched for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: global conf download url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalConfDownloadUrl'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/configuration-parts:
    get:
      tags:
        - globalconf-parts
      summary: CS administrator views the configuration parts of a configuration source
      operationId: getConfigurationParts
      description: <h3>Administrator views the configuration parts of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the configuration parts are fetched for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: global conf parts
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                description: array of configuration parts
                items:
                  $ref: '#/components/schemas/ConfigurationPart'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - globalconf-parts
      summary: CS administrator uploads additional configuration parts file
      operationId: uploadConfigurationParts
      description: <h3>Administrator uploads additional configuration parts file.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the configuration parts are uploaded for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      requestBody:
        description: new additional configuration parts file to add
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigurationPartUpload'
      responses:
        '200':
          description: the new trusted anchor resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedAnchor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/configuration-parts/{type}/download:
    get:
      tags:
        - globalconf-parts
      summary: download a configuration parts file
      operationId: downloadConfigurationParts
      description: <h3>Administrator downloads a configuration parts file.</h3>
      parameters:
        - in: path
          name: type
          description: the type of the configuration part
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationPartType'
        - in: query
          name: configuration_type
          description: the type of the configuration for which the configuration parts are uploaded for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: configuration parts file
          content:
            application/xml:
              schema:
                type: string
                format: binary
                description: configuration parts file
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/keys/{id}:
    delete:
      tags:
        - globalconf-keys
      summary: delete key
      operationId: deleteKey
      description: <h3>Administrator deletes the key.</h3>
      parameters:
        - in: path
          name: id
          description: id of the key
          required: true
          schema:
            type: string
            format: text
            minLength: 1
        - in: query
          name: ignore_warnings
          description: if true, any ignorable warnings are ignored. if false (or missing),
            any warnings cause request to fail
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: key deletion was successful
        '400':
          description: request was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                error_response:
                  $ref: '#/components/examples/ErrorExample'
                warnings_response:
                  $ref: '#/components/examples/DeleteKeyWarningExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/keys/{id}/activate:
    put:
      tags:
        - globalconf-keys
      summary: activate key
      operationId: activateKey
      description: <h3>Administrator activates a key.</h3>
      parameters:
        - in: path
          name: id
          description: id of the key
          required: true
          schema:
            type: string
            format: text
            minLength: 1
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/tokens:
    get:
      tags:
        - globalconf-tokens
      summary: CS administrator views the tokens of a configuration source
      operationId: getTokens
      description: <h3>Administrator views tokens of a specified configuration source.</h3>
      parameters:
        - in: query
          name: configuration_type
          description: the type of the configuration for which the tokens are fetched for
          required: true
          schema:
            $ref: '#/components/schemas/ConfigurationType'
      responses:
        '200':
          description: list of tokens
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                description: array of token objects
                items:
                  $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/tokens/{id}/login:
    put:
      tags:
        - globalconf-tokens
      summary: login to token
      operationId: loginToken
      description: <h3>Administrator logs in to a token</h3>
      parameters:
        - in: path
          name: id
          description: id of the token
          required: true
          schema:
            type: string
            format: text
            minLength: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPassword'
      responses:
        '200':
          description: logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/tokens/{id}/logout:
    put:
      tags:
        - globalconf-tokens
      summary: logout from token
      operationId: logoutToken
      description: <h3>Administrator logs out from token.</h3>
      parameters:
        - in: path
          name: id
          description: id of the token
          required: true
          schema:
            type: string
            format: text
            minLength: 1
      responses:
        '200':
          description: logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/tokens/{id}/keys:
    post:
      tags:
        - globalconf-keys
      summary: add new key
      operationId: addKey
      description: <h3>Adds key for selected token.</h3>
      parameters:
        - in: path
          name: id
          description: id of the token
          required: true
          schema:
            type: string
            format: text
            minLength: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyLabel'
      responses:
        '201':
          description: key created for the token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/trusted-anchors:
    get:
      tags:
        - globalconf-anchors
      summary: CS administrator views the trusted anchors
      operationId: getTrustedAnchors
      description: <h3>Administrator views the trusted anchors.</h3>
      responses:
        '200':
          description: list of anchors
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                description: array of trusted anchor objects
                items:
                  $ref: '#/components/schemas/TrustedAnchor'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - globalconf-anchors
      summary: CS administrator uploads a new additional trusted anchor
      operationId: uploadTrustedAnchor
      description: <h3>Administrator uploads a new additional trusted anchor.</h3>
      requestBody:
        description: the new trusted anchor file to add
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: trusted anchor file
      responses:
        '200':
          description: the new trusted anchor resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedAnchor'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/trusted-anchors/{hash}:
    delete:
      tags:
        - globalconf-anchors
      summary: delete a trusted anchor
      operationId: deleteTrustedAnchor
      description: <h3>Administrator deletes a trusted anchor.</h3>
      parameters:
        - in: path
          name: hash
          description: hash of the trusted anchor
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /globalconf/trusted-anchors/{hash}/download:
    get:
      tags:
        - globalconf-anchors
      summary: download trusted anchor
      operationId: downloadTrustedAnchor
      description: <h3>Administrator downloads the trusted anchor.</h3>
      parameters:
        - in: path
          name: hash
          description: hash of the trusted anchor
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 40
      responses:
        '200':
          description: trusted anchor
          content:
            application/xml:
              schema:
                type: string
                format: binary
                description: trusted anchor file
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /system/instance-identifier:
    get:
      tags:
        - system
      summary: get the instance identifier
      operationId: getInstanceIdentifier
      description: <h3>Administrator views the instance identifier of the Central Server.</h3>
      responses:
        '200':
          description: the instance identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceIdentifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /system/version:
    get:
      tags:
        - system
      summary: get information for the system version
      operationId: getSystemVersion
      responses:
        '200':
          description: system version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /system/status:
    get:
      tags:
        - system
      summary: get the system status
      operationId: getSystemStatus
      responses:
        '200':
          description: system status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /system/server-address:
    get:
      tags:
        - system
      summary: get the server address
      operationId: getCentralServerAddress
      responses:
        '200':
          description: central server address response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CentralServerAddress'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - system
      summary: update the server address
      operationId: updateCentralServerAddress
      requestBody:
        description: New central server address
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CentralServerAddress'
      responses:
        '200':
          description: System status with updated Central Server address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /system/management-services:
    get:
      tags:
        - system
      summary: get the current management services configuration
      operationId: getManagementServices
      description: <h3>Administrator views the management services configuration of the Central Server.</h3>
      responses:
        '200':
          description: the management services configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementServices'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /initialization:
    post:
      tags:
        - initialization
      summary: Initialize a new central server with the provided initial configuration
      operationId: initCentralServer
      description:
        <h3>Administrator initializes a new Central Server with the provided initial configuration.</h3>
        <p>
        This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed.
        If the pin code is too weak, the error code <code>weak_pin</code> is used and the entries in the metadata array are always ordered in following way
        <ul>
        <li>metadata has a list of strings ["pin_min_length", x, "pin_min_char_classes_count", y] where</li>
        <li>x = the minimum length of the pin code</li>
        <li>y = the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code</li>
        </ul>
        Other possible error code are
        <ul>
        <li><code>invalid_init_params</code> for "business" logic problems which can have any one or more of the following strings in the metadata field.
        There "_exists" -entries are returned if parameter has been given already in partially succeeded initialization.
        The "_not_provided"-entries are returned if these parameters is needed still for the initialization,  but it is not given in the request.

        </li>


        <ul>
        <li>pin_code_exists</li>
        <li>pin_code_not_provided</li>
        <li>server_address_exists</li>
        <li>server_address_not_provided</li>
        <li>instance_identifier_exists</li>
        <li>instance_identifier_not_provided</li>
        </ul>
        <li><code>validation_failure</code> for parameter format errors
        </ul>
        </p>
        </p>
        <strong>See the '400' response examples</strong>
      requestBody:
        description: initial central server configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitialServerConf'
      responses:
        '201':
          description: central server initialized
        '400':
          description: request was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              examples:
                error_response:
                  $ref: '#/components/examples/ErrorExample'
                error_invalid_init_params:
                  $ref: '#/components/examples/ErrorInvalidInitParamsMetadataExample'
                error_weak_pin:
                  $ref: '#/components/examples/ErrorWeakPinMetadataExample'
                warnings_response:
                  $ref: '#/components/examples/InitializationWarningExample'
                validation_errors_response:
                  $ref: '#/components/examples/ValidationErrorsExample'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /initialization/status:
    get:
      tags:
        - initialization
      summary: Check the initialization status of the Central Server
      operationId: getInitializationStatus
      description: <h3>Administrator checks the initialization status of the Central Server.</h3>
      responses:
        '200':
          description: initialization status of the Central Server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitializationStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /member-classes:
    get:
      tags:
        - member-classes
      summary: get list of member classes
      operationId: getMemberClasses
      description: <h3>CS Administrator lists member classes.</h3>
      responses:
        '200':
          description: array of member classes
          content:
            application/json:
              schema:
                type: array
                description: array of member classes
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/MemberClass'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - member-classes
      summary: add a new member class
      operationId: addMemberClass
      description: <h3>CS Administrator adds a new member class.</h3>
      requestBody:
        description: new additional member class to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberClass'
      responses:
        '200':
          description: the added member class
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberClass'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /member-classes/{code}:
    patch:
      tags:
        - member-classes
      summary: update member class description
      operationId: updateMemberClassDescription
      description: <h3>CS Administrator updates a member class description.</h3>
      parameters:
        - in: path
          name: code
          description: code of the member class
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 255
      requestBody:
        description: the new description of the member class
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberClassDescription'
      responses:
        '200':
          description: the new status of the updated member class
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberClass'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - member-classes
      summary: delete a member class
      operationId: deleteMemberClass
      description: <h3>CS Administrator deletes a member class.</h3>
      parameters:
        - in: path
          name: code
          description: code of the member class
          required: true
          schema:
            type: string
            format: text
            minLength: 1
            maxLength: 255
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    ConfigurationPartType:
      type: string
      format: enum
      description: the type of a globalconf configuration part
      example: SHARED_PARAMETERS
      enum:
        - SHARED_PARAMETERS
        - PRIVATE_PARAMETERS
        - FETCHINTERVAL
        - MONITORING
        - NEXTUPDATE
    InitializationStatus:
      type: object
      description: Initialization status of the Central Server
      allOf:
      - $ref: '#/components/schemas/InstanceIdentifier'
      - $ref: '#/components/schemas/CentralServerAddress'
      properties:
        software_token_init_status: # property for enum
          $ref: '#/components/schemas/TokenInitStatus'
      required:
        - software_token_init_status
    InitialServerConf:
      type: object
      description: central server initial configuration
      allOf:
        - $ref: '#/components/schemas/InstanceIdentifier'
        - $ref: '#/components/schemas/CentralServerAddress'
      properties:
        software_token_pin:
          type: string
          format: text
          description: pin code for the initial software token
          example: sup3rs3cr3t_p!n
          minLength: 1
          maxLength: 255
      required:
        - software_token_pin
    TokenInitStatus:
      type: string
      format: enum
      description: whether a token has been initialized or not – if the token init status
        cannot be resolved (e.g. signer module is offline), the value is UNKNOWN
      example: INITIALIZED
      enum:
        - INITIALIZED
        - NOT_INITIALIZED
        - UNKNOWN
    InstanceIdentifier:
      type: object
      description: the instance identifier of the Central Server
      required:
        - instance_identifier
      properties:
        instance_identifier:
          type: string
          format: text
          description: Valid instance identifier, shall not contain colon, semicolon, forwardslash, backslash, percent or control characters.
          example: FI-TEST
          minLength: 1
          maxLength: 255
    CentralServerAddress:
      type: object
      description: address of the central server
      required:
        - central_server_address
      properties:
        central_server_address:
          type: string
          format: text
          description: Central server’s public DNS name or external IP address
    ConfigurationAnchor:
      type: object
      description: global conf anchor
      required:
        - hash
        - created_at
      properties:
        hash:
          type: string
          format: hash
          description: anchor hash
          example: 42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3
          minLength: 1
          maxLength: 255
        created_at:
          type: string
          format: date-time
          description: anchor created at
          example: '2022-01-15T00:00:00.001Z'
          minLength: 24
          maxLength: 24
    ConfigurationType:
      type: string
      format: enum
      description: configuration type
      example: INTERNAL
      enum:
        - INTERNAL
        - EXTERNAL
    GlobalConfDownloadUrl:
      type: object
      description: the global conf download url object
      required:
        - url
      properties:
        url:
          type: string
          format: url
          description: the global conf download url
          example: https://dev.xroad.rocks/globalconf
          minLength: 1
    HighAvailabilityStatus:
      type: object
      description: Central server's high availability status
      properties:
        is_ha_configured:
          type: boolean
          description: indicates if the central server is in high availability mode
          default: false
        node_name:
          type: string
          format: text
          description: central server's node name
          example: node_0
          minLength: 1
          maxLength: 255
    MemberClass:
      type: object
      description: Central server's member classes
      allOf:
        - $ref: '#/components/schemas/MemberClassDescription'
      properties:
        code:
          type: string
          format: text
          description: member class code
          example: ORG
          minLength: 1
          maxLength: 255
      required:
        - code
    MemberClassDescription:
      type: object
      description: Central server's member class description
      required:
        - description
      properties:
        description:
          type: string
          format: text
          description: member class description
          example: Non-profit organisations
          minLength: 1
          maxLength: 255
    PossibleActions:
      type: array
      description: array containing the possible actions that can be done for this item
      items:
        $ref: '#/components/schemas/PossibleAction'
    PossibleAction:
      type: string
      format: enum
      description: an action to change state or edit anchors, keys or configuration parts
      example: DELETE
      enum:
        - DELETE
        - DOWNLOAD
        - ACTIVATE
        - LOGIN
        - LOGOUT
        - GENERATE_KEY
    SystemStatus:
      type: object
      description: Central server's status
      properties:
        initialization_status:
          $ref: '#/components/schemas/InitializationStatus'
        high_availability_status:
          $ref: '#/components/schemas/HighAvailabilityStatus'
    KeyLabel:
      type: object
      properties:
        label:
          type: string
          format: text
          description: label for the new key
          minLength: 1
          maxLength: 255
    ServiceProviderId:
      type: object
      required:
        - service_provider_id
      properties:
        service_provider_id:
          type: string
          format: text
          description: encoded service provider id
          example: SUBSYSTEM:CS:ORG:Client
          minLength: 1
          maxLength: 1279
    ManagementServices:
      type: object
      allOf:
        - $ref: '#/components/schemas/ServiceProviderId'
      properties:
        service_provider_name:
          type: string
          format: text
          description: name of the service provider
          example: NIIS
          minLength: 1
          maxLength: 255
        security_server_id:
          type: string
          format: text
          description: encoded id of the security server that provider the management services
          example: CS:ORG:111:SS1
          minLength: 1
          maxLength: 1279
        wsdl_address:
          type: string
          format: url
          description: the url of the management service wsdl
          example: https://dev.xroad.rocks/managementservices.wsdl
          minLength: 1
        services_address:
          type: string
          format: url
          description: the url of the management services
          example: https://dev.xroad.rocks/managementservice/manage/
          minLength: 1
        security_server_owners_global_group_code:
          type: string
          format: text
          description: the url of the management services
          example: https://dev.xroad.rocks/managementservice/manage/
          minLength: 1
      required:
        - security_server_id
        - security_server_owners_global_group_code
        - service_provider_name
        - services_address
        - wsdl_address
    Token:
      type: object
      description: Token. Also includes the possible actions that can be done to this object,
        e.g DELETE (only for token related operations and does not consider user authorization).
      required:
        - id
        - name
        - keys
        - status
        - logged_in
        - active
        - available
      properties:
        id:
          type: string
          format: text
          description: token id
          example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
          minLength: 1
          readOnly: true
        name:
          type: string
          format: text
          description: token name
          example: softToken-0
          minLength: 1
          maxLength: 255
        keys:
          type: array
          description: token keys
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Key'
        status:
          $ref: '#/components/schemas/TokenStatus'
        logged_in:
          type: boolean
          description: if the token has been logged in to
          example: true
        active:
          type: boolean
          description: if the token is active
          example: true
        available:
          type: boolean
          description: if the token is available
          example: true
        serial_number:
          type: string
          format: text
          description: serial number of the token
          example: 12345
        possible_actions:
          $ref: '#/components/schemas/PossibleActions'
    TokenStatus:
      type: string
      format: text
      description: token status
      example: OK
      enum:
        - OK # Normal operation status
        - USER_PIN_LOCKED # Blocked
        - USER_PIN_INCORRECT # Incorrect PIN was entered
        - USER_PIN_INVALID # Invalid PIN
        - USER_PIN_EXPIRED # PIN expired
        - USER_PIN_COUNT_LOW # Only a few tries left
        - USER_PIN_FINAL_TRY # Final try
        - NOT_INITIALIZED # Not inited
    TokenPassword:
      type: object
      properties:
        password:
          type: string
          format: text
          description: password for logging in to the token
          minLength: 1
      example:
        password: sm3!!ycat
    Key:
      type: object
      description: Key for the certificate. Also includes the possible actions that can be done to this object,
        e.g DELETE (only for key related operations and does not consider user authorization).
      required:
        - id
        - label
        - created_at
        - active
        - available
      properties:
        id:
          type: string
          format: text
          description: key id
          example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
          minLength: 1
          readOnly: true
        label:
          $ref: '#/components/schemas/KeyLabel'
        created_at:
          type: string
          format: date-time
          description: anchor created at
          example: '2022-01-12T00:00:00.001Z'
          minLength: 24
          maxLength: 24
        available:
          type: boolean
          description: if the key is available
          example: true
        active:
          type: boolean
          description: if the key is active
          example: true
        possible_actions:
          $ref: '#/components/schemas/PossibleActions'
    TrustedAnchor:
      type: object
      description: trusted anchor for globalconf
      required:
        - hash
        - created_at
        - instance_identifier
        - possible_actions
      properties:
        hash:
          type: string
          format: hash
          description: anchor hash
          example: 42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3
          minLength: 1
          maxLength: 255
        created_at:
          type: string
          format: date-time
          description: anchor created at
          example: '2022-01-12T00:00:00.001Z'
          minLength: 24
          maxLength: 24
        possible_actions:
          $ref: '#/components/schemas/PossibleActions'
    ConfigurationPart:
      type: object
      description: configuration part
      required:
        - configuration_part_type
        - filename
        - updated_at
        - version
        - optional
      properties:
        configuration_part_type:
          $ref: '#/components/schemas/ConfigurationPartType'
        filename:
          type: string
          format: filename
          example: shared-params.xml
          minLength: 1
          maxLength: 255
        updated_at:
          type: string
          format: date-time
          description: anchor created at
          example: '2022-01-12T00:00:00.001Z'
          minLength: 24
          maxLength: 24
        version:
          type: string
          format: text
          description: version of the conf part
          example: 3
          minLength: 1
        optional:
          type: boolean
          description: if the part is optional
          example: true
    ConfigurationPartUpload:
      type: object
      description: configuration parts file
      required:
        - file
        - configuration_part_type
      properties:
        file:
          type: string
          format: binary
        configuration_part_type:
          $ref: '#/components/schemas/ConfigurationPartType'
    User:
      $ref: '../../../../../common-rest-api/src/main/resources/common-openapi-definition.yaml#/components/schemas/User'
    Version:
      type: object
      description: version information
      required:
        - info
      properties:
        info:
          type: string
          format: text
          description: information about the security server
          example: Security Server version 6.21.0-SNAPSHOT-20190411git32add470
          minLength: 1
          maxLength: 255
    ErrorInfo:
      $ref: '../../../../../common-rest-api/src/main/resources/common-openapi-definition.yaml#/components/schemas/ErrorInfo'
    CodeWithDetails:
      $ref: '../../../../../common-rest-api/src/main/resources/common-openapi-definition.yaml#/components/schemas/CodeWithDetails'
  responses:
    BadRequest:
      description: request was invalid
    Conflict:
      description: an existing item already exists
    Forbidden:
      description: request has been refused
    NoContent:
      description: request was successful
    NotFound:
      description: resource requested does not exists
    Unauthorized:
      description: authentication credentials are missing
    InternalServerError:
      description: internal server error
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: X-Road-ApiKey token=<api key>
      # https://github.com/nordic-institute/X-Road-REST-UI/blob/XRDDEV-237/doc/Manuals/ug-ss_x-road_6_security_server_user_guide.md#1911-creating-new-api-keys
  examples:
    DeleteKeyWarningExample:
      summary: Warning response when trying to delete an authentication key with a registered authentication certificate
      value:
        status: 400
        error:
          code: warnings_detected
        warnings:
          - code: auth_key_with_registered_cert_warning
            metadata:
              - 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
    ErrorExample:
      $ref: '../../../../../common-rest-api/src/main/resources/common-openapi-definition.yaml#/components/examples/ErrorExample'
    ErrorWithMetadataExample:
      $ref: '../../../../../common-rest-api/src/main/resources/common-openapi-definition.yaml#/components/examples/ErrorWithMetadataExample'
    ErrorInvalidInitParamsMetadataExample:
      summary: Initialization error with metadata
      value:
        status: 400
        error:
          code: invalid_init_params
          metadata:
            - "server_address_not_provided"
            - "instance_id_not_provided"
            - "pin_code_exists"
    ErrorWeakPinMetadataExample:
      summary: Initialization or pin change error with metadata when the provided pin is too weak
      value:
        status: 400
        error:
          code: weak_pin
          metadata:
            - "pin_min_length"
            - "8"
            - "pin_min_char_classes_count"
            - "3"
    InitializationWarningExample:
      summary: All initialization warnings example.
      value:
        status: 400
        error:
          code: warnings_detected
        warnings:
          - code: init_software_token_initialized
    ValidationErrorsExample:
      summary: Validation errors response body example
      value:
        status: 400
        error:
          code: validation_failure
          validation_errors:
            "initialServerConf.instanceIdentifier":
              - IdentifierChars
security:
  - ApiKeyAuth: [ ]
