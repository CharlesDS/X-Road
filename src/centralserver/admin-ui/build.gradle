buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'base'
    id 'com.github.node-gradle.node' version "$nodePluginVersion"
}

configurations {
    npm
    dist
}

dependencies {
    npm project(path: ":shared-ui", configuration: "npm")
}

node {
    download = true
    version = nodeVersion
    npmInstallCommand = "ci"
}

task npmInstallDeps(type: NpmTask) {
  inputs.files(configurations.npm)
  args = ['install', '--quiet'] + inputs.files.collect { it.toString() }
  outputs.files(fileTree("node_modules/@niis/shared-ui") {
      // npmInstall will overwrite this with a different version (!?)
      exclude("package.json")
  })
}

npmInstall {
    dependsOn += 'npmInstallDeps'
}

task npmBuild(type: NpmTask, dependsOn: ["checkFrontAudit"]) {
    inputs.files(fileTree(".") {
        exclude(
            "build.gradle",
            "build/",
            "dist/",
            "node_modules/.cache/"
        )
    })
    outputs.dir("dist")
    args = ['run', '--quiet', 'build']
}

task checkFrontAudit(type: NpmTask, dependsOn: 'npmInstall') {
    inputs.files fileTree(".") {
        exclude(
            "build.gradle",
            "build/",
            "dist/",
            "node_modules/.cache/"
        )
    }
    outputs.dir("dist")
    if (project.hasProperty('strict-frontend-audit')) {
        // do a strict front audit with npm run check-audit
        // check-audit uses ignore list from audit-resolve.json
        // To update that, do "npm run resolve-audit" from frontend dir
        args = ['run', 'check-audit']
    } else {
        // do a loose front audit with npm in-built audit
        args = ['audit', '--production', '--audit-level=moderate']
    }
}

// check that npm run license-check passes
task checkFrontLicense(type: NpmTask, dependsOn: 'npmInstall') {
    inputs.files("src/", "test/", "public/")
    outputs.upToDateWhen { true }
    args = ['run', 'license-check']
    execOverrides {
        it.workingDir = 'frontend'
    }
}

clean {
    delete file('node_modules')
    delete file('dist')
}

assemble.dependsOn npmBuild

artifacts {
    dist(file("dist/")) {
        builtBy(npmBuild)
    }
}

// run e2e tests vs remote url
if (!project.hasProperty("testTargetUrl")) {
    ext.testTargetUrl = ""
}

if (!project.hasProperty("testDataUrl")) {
    ext.testDataUrl = ""
}

if (!project.hasProperty("withTags")) {
    ext.withTags = ""
}

if (!project.hasProperty("withoutTags")) {
    ext.withoutTags = ""
}

if (!project.hasProperty("failScreenshot")) {
    ext.failScreenshot = ""
}

if (!project.hasProperty("runHeadless")) {
    ext.runHeadless = ""
}

task e2eTest(type: NpmTask, dependsOn: 'npmInstall') {

    doFirst {
        if (testTargetUrl.isEmpty()) {
            throw new GradleException('testTargetUrl property was empty, it is mandatory for e2eTests')
        }
        if (testDataUrl.isEmpty()) {
            throw new GradleException('testDataUrl property was empty, it is mandatory for e2eTests')
        }
    }

    inputs.files fileTree(".") { exclude("dist/", "node_modules/.cache/") }
    outputs.dir("./dist")

    args = ['run', 'test:e2e', '--', '--url=' + testTargetUrl, '--testdata=' + testDataUrl, '--tag=' + withTags, '--skiptags=' + withoutTags]

    if (!runHeadless.isEmpty()) {
        if (runHeadless == "true") {
            args.add("--headless")
        }
    }

    execOverrides {
        it.workingDir = '.'
    }
}
